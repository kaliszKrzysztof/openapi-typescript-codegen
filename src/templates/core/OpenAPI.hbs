{{>header}}

import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

{{#equals @root.httpClient 'fetch'}}{{>fetch/responseType}}{{/equals}}
{{#equals @root.httpClient 'xhr'}}{{>xhr/responseType}}{{/equals}}
{{#equals @root.httpClient 'node'}}{{>node/responseType}}{{/equals}}
export interface RequestHookParams {
    url: string;
    options: ApiRequestOptions;
}

export interface ResponseHookParams {
    url: string;
    result: ApiResult;
    response?: ResponseImplementation;
}

type Config = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    REQUEST_HOOK?: (params: RequestHookParams) => Promise<RequestHookParams>;
    RESPONSE_HOOK?: (result: ResponseHookParams) => Promise<ApiResult>;
    TOKEN?: string | Resolver<string>;
    USERNAME?: string | Resolver<string>;
    PASSWORD?: string | Resolver<string>;
    HEADERS?: Headers | Resolver<Headers>;
}

export const OpenAPI: Config = {
    BASE: '{{{server}}}',
    VERSION: '{{{version}}}',
    WITH_CREDENTIALS: false,
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
};
