{{>header}}

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { OpenAPI } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isSuccess}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>xhr/getRequestBody}}


{{>xhr/sendRequest}}


{{>xhr/getResponseHeader}}


{{>xhr/getResponseBody}}


{{>functions/catchErrors}}


/**
 * Request using XHR client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function request(options: ApiRequestOptions): Promise<ApiResult> {
    const url = getUrl(options);

    // Pre-hook on request if a function is provided.
    const requestHookResult = OpenAPI.REQUEST_HOOK ?
        (await OpenAPI.REQUEST_HOOK({ url, options})) : { url, options };

    const response = await sendRequest(requestHookResult.options, requestHookResult.url);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, requestHookResult.options.responseHeader);


    const result: ApiResult = {
        url,
        ok: isSuccess(response.status),
        status: response.status,
        statusText: response.statusText,
        body: responseHeader || responseBody
    };

    // Post-request Hook if provided
    result =  OpenAPI.RESPONSE_HOOK ? await OpenAPI.RESPONSE_HOOK({url, result, response}) : result;

    catchErrors(options, result);
    return result;
}
